name: gentoo-mq-pro

on:
  push:
    paths:
      - '.github/workflows/gentoo-mq-pro.yml'
      - 'mq-pro/*'

  schedule:
    - cron: "0 2 * * *"

jobs:
  create-img:
    runs-on: 	ubuntu-22.04
    env:
      download_url_prefix: https://distfiles.gentoo.org/releases/riscv/autobuilds/
      base_path: mq-pro
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install software
        run: |
              sudo apt update && \
              sudo apt install -y gdisk dosfstools g++-12-riscv64-linux-gnu build-essential \
                                  libncurses-dev gawk flex bison openssl libssl-dev \
                                  dkms libelf-dev libudev-dev libpci-dev libiberty-dev autoconf mkbootimg \
                                  fakeroot genext2fs genisoimage libconfuse-dev mtd-utils mtools qemu-utils qemu-utils squashfs-tools \
                                  device-tree-compiler rauc simg2img u-boot-tools f2fs-tools arm-trusted-firmware-tools
              sudo update-alternatives --install \
                  /usr/bin/riscv64-linux-gnu-gcc riscv64-gcc /usr/bin/riscv64-linux-gnu-gcc-12 10
              sudo update-alternatives --install \
                  /usr/bin/riscv64-linux-gnu-g++ riscv64-g++ /usr/bin/riscv64-linux-gnu-g++-12 10
              
              git clone --depth=1 https://github.com/pengutronix/genimage.git genimage
              pushd genimage
                ./autogen.sh
                ./configure CFLAGS='-g -O0' --prefix=/usr
                make -j$(nproc)
                sudo make install
                which genimage
              popd

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Download stage3 systemd
        run: |
              export latest_stage3_path=$(curl -sSL ${download_url_prefix}/latest-stage3.txt | grep stage3-rv64_lp64d-systemd | awk '{ print $1 }' | head -n 1)
              wget ${download_url_prefix}/${latest_stage3_path}

      - name: Unpack Toolchains
        run: |
              wget https://github.com/YuzukiHD/YuzukiSBC-Toolchains/releases/download/thead-riscv/riscv64-glibc-gcc-thead_20200702.tar.xz
              sudo tar -xvf riscv64-glibc-gcc-thead_20200702.tar.xz -C /opt

      - name: Unpack Stage3
        run: |
              sudo mkdir rootfs
              pushd rootfs
                sudo tar xpvf ../stage3-rv64*.tar.xz --xattrs-include='*.*' --numeric-owner
              popd
      
      - name: Mount & Prepare Rootfs
        run: |
              pushd rootfs
                sudo mount -t proc proc proc
                sudo mount -B /dev dev/
                sudo mount --make-rslave dev
                sudo mount -B /sys sys/
                sudo mount --make-rslave sys
                sudo mount --bind /run run
                sudo mount --make-rslave run
                sudo cp --dereference /etc/resolv.conf etc/
                export OLDPWD=$PWD
                echo 'MAKEOPTS="-j2"' | sudo tee -a $OLDPWD/etc/portage/make.conf
                sudo mkdir --parents $OLDPWD/etc/portage/repos.conf
                sudo cp -v $OLDPWD/usr/share/portage/config/repos.conf $OLDPWD/etc/portage/repos.conf/gentoo.conf
                cat ../${{ env.base_path }}/fstab | sudo tee -a $OLDPWD/etc/fstab
                echo 'PORTAGE_BINHOST="https://mirror.onfoo.top/calculate/grp/riscv64/"' | sudo tee -a $OLDPWD/etc/portage/make.conf
              popd

      - name: Compile Kernel && Install
        run: |
              git clone --depth=1 https://github.com/Tina-Linux/tina-d1x-linux-5.4.git kernel
              pushd kernel
                # thead toolchains
                export OLDPATH=$PATH
                export PATH=$PATH:/opt/riscv64-glibc-gcc-thead_20200702/bin
                # From mangopi-sbc/buildroot-d1x-t113
                wget https://raw.githubusercontent.com/mangopi-sbc/buildroot-d1x-t113/main/buildroot/board/mangopi/mq-pro/configs/linux/linux_mangopi_mq_pro_defconfig
                sed -i "/CONFIG_SUNXI_GMAC=y/d" linux_mangopi_mq_pro_defconfig
                mv linux_mangopi_mq_pro_defconfig arch/riscv/configs/mangopi_mq_pro_defconfig
                wget -P arch/riscv/boot/dts https://raw.githubusercontent.com/mangopi-sbc/buildroot-d1x-t113/main/buildroot/board/allwinner-generic/sun20i-d1s/dts/linux/sun20iw1p1-linux.dtsi
                wget -P arch/riscv/boot/dts https://raw.githubusercontent.com/mangopi-sbc/buildroot-d1x-t113/main/buildroot/board/mangopi/mq-pro/dts/linux/sun20i-d1-mangopi-mq-pro-linux.dts
                wget https://raw.githubusercontent.com/mangopi-sbc/buildroot-d1x-t113/main/buildroot/board/mangopi/mq-pro/patch/linux/0001-rename-linux-dtb-build-file.patch
                patch -p1 < 0001-rename-linux-dtb-build-file.patch

                make CROSS_COMPILE=riscv64-unknown-linux-gnu- ARCH=riscv mangopi_mq_pro_defconfig
                if [ -f ../${{ env.base_path }}/kernelconfig ]; then
                  cp -v ../${{ env.base_path }}/kernelconfig .config
                fi
                make CROSS_COMPILE=riscv64-unknown-linux-gnu- ARCH=riscv -j$(nproc)
                if [ x"$(cat .config | grep CONFIG_MODULES=y)" = x"CONFIG_MODULES=y" ]; then
                  sudo make CROSS_COMPILE=riscv64-unknown-linux-gnu- ARCH=riscv INSTALL_MOD_PATH=../rootfs/ modules_install -j$(nproc)
                fi
                # sudo make CROSS_COMPILE=riscv64-unknown-linux-gnu- ARCH=riscv INSTALL_PATH=../rootfs/boot zinstall -j$(nproc)

                # Install Kernel
                sudo cp -v arch/riscv/boot/Image ../rootfs/boot/
                sudo cp -v arch/riscv/boot/Image.gz ../rootfs/boot/
                # Install DTB
                sudo cp -v arch/riscv/boot/dts/sun20i-d1-mangopi-mq-pro-linux.dtb ../rootfs/boot/
                sudo cp -v .config ../rootfs/boot/latest-config

                # wifi
                git clone https://github.com/lwfinger/rtl8723ds.git rtl8723ds
                pushd rtl8723ds
                  # Fix VFS_internal_I_am_really_a_filesystem_and_am_NOT_a_driver
                  sed -i '/MODULE_VERSION(DRIVERVERSION);/iMODULE_IMPORT_NS(VFS_internal_I_am_really_a_filesystem_and_am_NOT_a_driver);\n' \
                          os_dep/linux/os_intfs.c
                  make CROSS_COMPILE=riscv64-unknown-linux-gnu- ARCH=riscv KSRC=../ -j$(nproc) modules || true
                popd

                for kernel_version in $(ls ../rootfs/lib/modules/);
                do
                  sudo install -D -p -m 644 "rtl8723ds/8723ds.ko" \
                      "../rootfs/lib/modules/${kernel_version}/kernel/drivers/net/wireless/8723ds.ko"
                  sudo depmod -a -b "../rootfs" "${kernel_version}"
                  echo '8723ds' >> 8723ds.conf
                  sudo cp 8723ds.conf "../rootfs/etc/modules-load.d/"
                  rm -rf 8723ds.conf
                done

                ls -al ../rootfs/boot/

                # Restore PATH
                export PATH=$OLDPATH
              popd

              

      # - name: UBoot Compile 
      #   id: uboot
      #   run: |
      #           git clone https://github.com/Tina-Linux/tina-d1x-u-boot-2018.git u-boot
      #           pushd u-boot
      #             export OLDPATH=$PATH
      #             export PATH=$PATH:/opt/riscv64-glibc-gcc-thead_20200702/bin
      #             wget -P arch/riscv/dts https://raw.githubusercontent.com/mangopi-sbc/buildroot-d1x-t113/main/buildroot/board/mangopi/mq-pro/dts/uboot/sun20i-d1-mangopi-mq-pro-uboot.dts
      #             wget -P arch/riscv/dts https://raw.githubusercontent.com/mangopi-sbc/buildroot-d1x-t113/main/buildroot/board/allwinner-generic/sun20i-d1/dts/uboot/sun20iw1p1-clk.dtsi 
      #             wget -P arch/riscv/dts https://raw.githubusercontent.com/mangopi-sbc/buildroot-d1x-t113/main/buildroot/board/allwinner-generic/sun20i-d1/dts/uboot/sun20iw1p1-soc-system.dtsi

      #             wget https://raw.githubusercontent.com/mangopi-sbc/buildroot-d1x-t113/main/buildroot/board/mangopi/mq-pro/configs/uboot/uboot_mangopi_mq_pro_defconfig
      #             mv uboot_mangopi_mq_pro_defconfig configs/mangopi_mq_pro_defconfig

      #             wget https://raw.githubusercontent.com/mangopi-sbc/buildroot-d1x-t113/main/buildroot/board/mangopi/mq-pro/patch/uboot/0001-add-support-for-buildroot.patch
      #             wget https://raw.githubusercontent.com/mangopi-sbc/buildroot-d1x-t113/main/buildroot/board/mangopi/mq-pro/patch/uboot/0002-fix-uboot-disable-dtc-selfbuilt.patch
      #             wget https://raw.githubusercontent.com/mangopi-sbc/buildroot-d1x-t113/main/buildroot/board/mangopi/mq-pro/patch/uboot/0003-fix-uboot-support-for-buildroot-dts-file.patch
      #             wget https://raw.githubusercontent.com/mangopi-sbc/buildroot-d1x-t113/main/buildroot/board/mangopi/mq-pro/patch/uboot/0004-fix-No-rule-to-make-target-sunxi_challenge.patch
      #             # fix yylloc
      #             wget https://github.com/Tomoms/android_kernel_oppo_msm8974/commit/11647f99b4de6bc460e106e876f72fc7af3e54a6.patch
      #             patch -p1 < 0001-add-support-for-buildroot.patch
      #             patch -p1 < 0002-fix-uboot-disable-dtc-selfbuilt.patch
      #             patch -p1 < 0003-fix-uboot-support-for-buildroot-dts-file.patch
      #             patch -p1 < 0004-fix-No-rule-to-make-target-sunxi_challenge.patch
      #             patch -p1 < 11647f99b4de6bc460e106e876f72fc7af3e54a6.patch

      #             make CROSS_COMPILE=riscv64-unknown-linux-gnu- ARCH=riscv mangopi_mq_pro_defconfig
      #             make CROSS_COMPILE=riscv64-unknown-linux-gnu- ARCH=riscv -j$(nproc)
      #             export PATH=$OLDPATH
      #           popd

      - name: Update Base
        run: |
              pushd rootfs
                sudo chroot . /bin/bash -c "source /etc/profile && systemctl enable systemd-networkd"
                sudo chroot . /bin/bash -c "source /etc/profile && echo root:Riscv2022# | chpasswd"
                sudo chroot . /bin/bash -c "source /etc/profile && echo gentoo-${{ env.base_path }} > /etc/hostname"
                sudo chroot . /bin/bash -c "source /etc/profile && emerge-webrsync"
                sudo chroot . /bin/bash -c "source /etc/profile && emerge -v -g htop neofetch tmux net-wireless/wpa_supplicant"
                # sudo chroot . /bin/bash -c "source /etc/profile && emerge -v -g htop dev-vcs/git tmux net-wireless/wpa_supplicant"
                # if [ x"$(cat boot/latest-config | grep CONFIG_MODULES=y)" = x"CONFIG_MODULES=y" ]; then
                #   sudo chroot . /bin/bash -c "source /etc/profile && emerge -v dev-vcs/git tmux dracut"
                #   sudo chroot . /bin/bash -c 'source /etc/profile && cd /boot && for file in $(ls /lib/modules/); do dracut initrd.img-$file $file; done'
                #   # sudo chroot . /bin/bash -c "source /etc/profile && emerge --verbose --update --deep --newuse @world"
                # else
                #   sudo sed -i '/initrd/d' boot/grub.cfg
                # fi
                ls -al boot/
              popd

      - name: Clean && Umount && Compress
        id: compress
        run: |
              sudo sed -i 's/MAKEOPTS="-j2"/MAKEOPTS="-j1"/g' rootfs/etc/portage/make.conf
              sudo sed -i '/PORTAGE_BINHOST=/d' rootfs/etc/portage/make.conf
              sudo rm -rf rootfs/var/tmp/portage/* rootfs/var/cache/distfiles/*
              sudo rm -rf rootfs/root/*
              sudo rm -rf rootfs/var/db/repos/*
              sudo umount rootfs/proc rootfs/dev rootfs/sys rootfs/run
              mkdir workdir
              sudo mv rootfs/boot/* workdir
              pushd workdir
                sudo cp -v ../${{ env.base_path }}/*.fex .
                sudo cp -v ../${{ env.base_path }}/ramdisk.img .
                sudo mkbootimg --kernel Image --ramdisk ramdisk.img \
                          --board sun20i --base 0x40200000 --kernel_offset 0x0 \
                          --ramdisk_offset 0x01000000 -o boot.img
                sudo fallocate -l 3G rootfs.ext4
                sudo mkfs.ext4 -d ../rootfs -r 1 -N 0 -m 5 -L "rootfs" -O ^64bit rootfs.ext4 "3G"
                sudo genimage --config ../${{ env.base_path }}/genimage.cfg \
                              --rootpath `mktemp -d` --tmppath `mktemp -d`  --inputpath $PWD --outputpath $PWD
              popd

              export file_name=gentoo-${{ env.base_path }}-$(date +%Y%m%d%H%M%S)
              echo "file_name=${file_name}" >> $GITHUB_ENV
              mv workdir/sdcard.img $file_name.img
              zstd -T0 --ultra -20 $file_name.img
              ls -al .

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: gentoo-${{ env.base_path }}-img
          path: gentoo-${{ env.base_path }}-*.img.zst
          retention-days: 3
      
      - name: Create GitHub release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{ env.file_name }}
          title: ${{ env.file_name }}
          prerelease: true
          files: |
            gentoo-${{ env.base_path }}-*.img.zst
