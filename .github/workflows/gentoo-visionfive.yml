name: gentoo-visionfive

on:
  push:
    paths:
      - '.github/workflow/gentoo-visionfive.yml'
      - 'visionfive/*'


  schedule:
    - cron: "0 2 * * *"

jobs:
  create-img:
    runs-on: 	ubuntu-22.04
    env:
      download_url_prefix: https://distfiles.gentoo.org/releases/riscv/autobuilds/
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install software
        run: |
              sudo apt update && \
              sudo apt install -y gdisk dosfstools g++-12-riscv64-linux-gnu build-essential \
                                  libncurses-dev gawk flex bison openssl libssl-dev \
                                  dkms libelf-dev libudev-dev libpci-dev libiberty-dev autoconf
              sudo update-alternatives --install \
                  /usr/bin/riscv64-linux-gnu-gcc riscv64-gcc /usr/bin/riscv64-linux-gnu-gcc-12 10
              sudo update-alternatives --install \
                  /usr/bin/riscv64-linux-gnu-g++ riscv64-g++ /usr/bin/riscv64-linux-gnu-g++-12 10

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Download stage3 systemd
        run: |
              export latest_stage3_path=$(curl -sSL ${download_url_prefix}/latest-stage3.txt | grep stage3-rv64_lp64d-systemd | awk '{ print $1 }' | head -n 1)
              wget ${download_url_prefix}/${latest_stage3_path}

      - name: Create rootfs.img & Mount Partition
        run: |
              dd if=/dev/zero of=visionfive.img bs=7M count=1024
              sfdisk visionfive.img < visionfive/part-table.conf
              sudo losetup -P /dev/loop100 visionfive.img
              sudo mkfs.ext4 /dev/loop100p3
              sudo mkfs.ext4 /dev/loop100p4
              sudo mkfs.vfat -F32 /dev/loop100p2
              sudo mkdir rootfs
              sudo mount /dev/loop100p4 rootfs
              sudo mkdir rootfs/boot
              sudo mount /dev/loop100p3 rootfs/boot
              sudo mkdir rootfs/boot/efi
              sudo mount /dev/loop100p2 rootfs/boot/efi

      - name: Unpack 
        run: |
              pushd rootfs
                sudo tar xpvf ../stage3-rv64*.tar.xz --xattrs-include='*.*' --numeric-owner
              popd
      
      - name: Mount & Prepare Rootfs
        run: |
              pushd rootfs
                sudo mount -t proc proc proc
                sudo mount -B /dev dev/
                sudo mount --make-rslave dev
                sudo mount -B /sys sys/
                sudo mount --make-rslave sys
                sudo mount --bind /run run
                sudo mount --make-rslave run
                sudo cp --dereference /etc/resolv.conf etc/
                export OLDPWD=$PWD
                echo 'MAKEOPTS="-j2"' | sudo tee -a $OLDPWD/etc/portage/make.conf
                sudo mkdir --parents $OLDPWD/etc/portage/repos.conf
                sudo cp -v $OLDPWD/usr/share/portage/config/repos.conf $OLDPWD/etc/portage/repos.conf/gentoo.conf
                cat ../visionfive/fstab | sudo tee -a $OLDPWD/etc/fstab
                sudo cp -v ../visionfive/50-dhcp.network $OLDPWD/etc/systemd/network/
              popd

      - name: Compile Kernel && Install
        run: |
              
              git clone --depth=1 https://github.com/starfive-tech/linux.git kernel
              pushd kernel
                make CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv visionfive_defconfig
                if [ -f ../visionfive/kernelconfig ]; then
                  cp -v ../visionfive/kernelconfig .config
                fi
                make CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv -j$(nproc)
                if [ x"$(cat .config | grep CONFIG_MODULES=y)" = x"CONFIG_MODULES=y" ]; then
                  sudo make CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv INSTALL_MOD_PATH=../rootfs/ modules_install -j$(nproc)
                fi
                sudo make CROSS_COMPILE=riscv64-linux-gnu- ARCH=riscv INSTALL_PATH=../rootfs/boot zinstall -j$(nproc)
                # Install DTB
                sudo cp -v arch/riscv/boot/dts/starfive/jh7100-starfive-visionfive-v1.dtb ../rootfs/boot/
                sudo cp -v arch/riscv/boot/dts/starfive/jh7100-beaglev-starlight.dtb ../rootfs/boot/
                sudo cp -v .config ../rootfs/boot/latest-config
                ls -al ../rootfs/boot/
              popd
              
      - name: Install Grub && Configure grub.cfg
        run: |
              sudo mkdir -p rootfs/boot/efi/EFI/gentoo
              sudo cp -v visionfive/grubriscv64.efi rootfs/boot/efi/EFI/gentoo/
              sudo mkdir -p rootfs/boot/boot
              sudo cp -v visionfive/uEnv.txt rootfs/boot/boot
              export kernel_version=$(ls rootfs/boot/ | grep vmlinuz- | sed 's/vmlinuz-//' | head -n 1 )
              sudo cp -v visionfive/grub.cfg rootfs/boot/
              sudo sed -i "s/custom_kernel_version/$kernel_version/g" rootfs/boot/grub.cfg

      - name: Update Base
        run: |
              pushd rootfs
                sudo chroot . /bin/bash -c "source /etc/profile && systemctl enable systemd-networkd"
                sudo chroot . /bin/bash -c "source /etc/profile && echo root:Riscv2022# | chpasswd"
                sudo chroot . /bin/bash -c "source /etc/profile && echo gentoo-starfive > /etc/hostname"
                sudo chroot . /bin/bash -c "source /etc/profile && emerge-webrsync"
                sudo chroot . /bin/bash -c "source /etc/profile && emerge -v tmux net-wireless/wpa_supplicant"
                if [ x"$(cat boot/latest-config | grep CONFIG_MODULES=y)" = x"CONFIG_MODULES=y" ]; then
                  sudo chroot . /bin/bash -c "source /etc/profile && emerge -v dev-vcs/git tmux dracut"
                  sudo chroot . /bin/bash -c 'source /etc/profile && cd /boot && for file in $(ls /lib/modules/); do dracut initrd.img-$file $file; done'
                  # sudo chroot . /bin/bash -c "source /etc/profile && emerge --verbose --update --deep --newuse @world"
                else
                  sudo sed -i '/initrd/d' boot/grub.cfg
                fi
                ls -al boot/
              popd

      - name: Clean && Umount && Compress
        id: compress
        run: |
              sudo rm -rf rootfs/var/tmp/portage/* rootfs/var/cache/distfiles/*
              sudo rm -rf rootfs/root/*
              sudo rm -rf rootfs/var/db/repos/*
              sudo umount -l rootfs
              sudo losetup -d /dev/loop100
              export file_name=gentoo-visionfive-$(date +%Y%m%d%H%M%S)
              echo "file_name=${file_name}" >> $GITHUB_ENV
              mv visionfive.img $file_name.img
              zstd -T0 --ultra -20 $file_name.img
              ls -al .

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: gentoo-visionfive-img
          path: gentoo-visionfive-*.img.zst
          retention-days: 3
      
      - name: Create GitHub release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{ env.file_name }}
          title: ${{ env.file_name }}
          prerelease: true
          files: |
            gentoo-visionfive-*.img.zst
